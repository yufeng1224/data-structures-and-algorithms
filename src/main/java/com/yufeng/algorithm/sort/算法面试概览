bobo 新课程 ———— 玩转算法面试, 从真题到思维全面提升算法思维

这个课程的目标是什么?
   1. 让大家在面对面试中的算法问题时, 有一个合理的思考路径
   2. 面对算法面试, 不畏惧
      2-1 因为面试中的算法问题, 通常并不"复杂", 远远不需要啃完一本<算法导论>


什么是算法面试?
   1. 不代表能够"正确"回答每一个算法问题, 合理的思考方向其实更重要, 也是正确完成算法面试问题的前提
   2. 算法面试优秀不意味着技术面试优秀
   3. 技术面试优秀不意味着能够拿到offer
   4. 如果是非常难的问题, 对你的竞争对手来说, 也是难的, 关键在于所表达出的解决问题的思路
   5. 甚至通过表达解题思路的方向, 得出结论: 这个问题的解决方案, 应该在哪一个领域, 我们通过查阅或者进一步学习解决问题


什么是给出合理的思考路径?
   1. 算法面试的目的不是给出一个"正确"答案, 而是展示给面试官你思考问题的方式
   2. "正确"本身是一个相对概念 (解决问题不是一场考试)
   3. 算法面试不是高考, 把这个过程看作是和面试官一起探讨一个问题的解决方案
   4. 对于问题的细节和应用环境, 可以和面试官沟通。 这个沟通本身很重要, 它暗示着你思考问题的方式


问题举例: 我们需要对一组数据进行排序
   1. 一般直接给出的答案: 快速排序算法, 时间复杂度 O(n logN)
   2. 这组数据有什么样的特征?
      2-1 有没有可能包含大量重复的元素? 如果有这种可能的话, 三路快排是更好地选择
      2-2 是否大部分数据距离它正确的位置很近? 是否近乎有序?
          如果这样的话, 插入排序是更好地选择

      2-3 是否数据的取值范围非常有限? 比如对学生成绩排序
          如果是这样的话, 计数排序时更好地选择

   3. 对排序有什么额外的要求?
      3-1 是否需要稳定排序? 如果是的话, 归并排序是更好地选择

   4. 数据的存储状态是怎样的?
      4-1 是否是使用链表存储的? 如果是的话, 归并排序时更好地选择

   5. 数据的存储状态是怎样的?
      5-1 数据的大小是否可以装载在内存里?
      5-2 数据量很大, 或者内存很小, 不足以装载在内存里, 需要使用外排序算法

------------------------------------------------------------------------------------------------------------------------
算法面试优秀并不意味着技术面试优秀
   1. 算法面试只是技术面试的一部分
   2. 根据你的简历和应聘职位的不同, 势必要考察其他技术方面
   3. 项目经历和项目中遇到的实际问题
   4. 你遇到的印象最深的bug是什么?
   5. 面向对象、设计模式、网络相关、安全相关、内存相关、并发相关、系统设计(scalability)


技术面试优秀不意味着能够拿到offer
   1. 技术面试只是面试的一部分。 面试不仅仅是考察你的技术水平, 还是了解你的过去以及形成的思考行为方式
   2. 关于过去: 参与项目至关重要!
   3. 参与实战课程学习
   4. 创建自己的项目
      4-1 自己做小应用: 计划表; 备忘录; 播放器
      4-2 自己解决小问题: 爬虫; 数据分析; 词频统计
      4-3 "不是项目"的项目: 一本优秀的技术书籍的代码整理等
      4-4 分享: 自己的技术博客; github 等等


通过过去了解你的思考行为方式?
   1. 遇到的最大的挑战?
   2. 犯过的错误?
   3. 遭遇的失败?
   4. 最享受的工作内容?
   5. 遇到冲突的处理方式?
   6. 做的最与众不同的事?


准备好合适的问题问面试官?
   1. 真个小组的大概运行模式是怎么样的?
   2. 整个项目的后序规划是如何的?
   3. 这个产品中的某个问题是如何解决的?
   4. 为什么会选择某些技术? 标准?

------------------------------------------------------------------------------------------------------------------------









