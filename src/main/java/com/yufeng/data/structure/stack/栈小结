线性数据结构 ———— 栈(Stack)

栈
  1. 栈也是一种线性结构;
  2. 相比数组, 栈对应的操作是数组的子集;
  3. 只能从一端添加元素, 也只能从一端取出元素;
  4. 这一端称为栈顶;
  5. 栈是一种后进先出的数据结构(Last In First Out) LIFO

栈: 是一种后进先出的数据结构，只能从一端入栈或者出栈。相比数组，栈对应的操作是数组的子集。 底层实现方式可以有多种, Jdk中的栈是通过数组实现的!


栈的应用:
    1) 计算机中的撤销操作(Undo 操作);
    2) 程序调用的系统栈;
    3) 开发时括号的匹配;


程序调用的系统栈案例演示
   func A() {            func B() {         func C()
     1  ...                1 ...             1 ...
     2  B()                2 C()             2 ...
     3  ...                3 ...             3 ...
   }                     }                  }

以上三个函数在系统栈中的应用是重点, 一定要掌握!! 可以更好地去理解递归！！！


栈的相关实现方法
   1. void push(E);
   2. E pop();
   3. E peek;
   4. int getSize();
   5. boolean isEmpty();

   从用户的角度看, 支持这些操作就好;
   具体底层实现, 用户不关心
   实际底层有多种实现方式;


栈的时间复杂度分析:
     void push(E);          均摊: O(1)
     E pop();               均摊: O(1)
     E peek();              O(1)
     int getSize();         O(1)
     boolean isEmpty();     O(1)

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

总结:
   1. 栈是一种后进先出(LIFO)的线性数据结构;
   2. 栈只能从一端添加或者取出元素, 这一端称为栈顶;
   3. 栈可以用数组或者链表来实现;
      2-1 用数组实现的栈叫作顺序栈, 它利用到了数组addLast()的操作, 均摊时间复杂度为O(1)这一特性;
      2-2 用链表实现的栈叫作链式栈, 它利用到了链表addFirst()的操作, 时间复杂度为O(1)这一特性;
   4. 在jdk中, 栈继承了Vector, 也就是说它是基于数组实现的;
   5. 栈的应用场景有很多, 比如说:
      5-1 浏览器的回退或者前进功能;
      5-2 计算机中的撤销操作(Undo 操作);
      5-3 程序调用的系统栈;
      5-4 开发时括号的匹配;
      5-5 反转字符串;
      都可以使用栈这种数据结构;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————



