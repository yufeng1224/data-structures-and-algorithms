红黑树


《算法导论》中的红黑树介绍
    1. 每个节点或者是红色的，或者是黑色的;
    2. 根节点是黑色的;
    3. 每一个叶子节点(NUll或者空节点)必须是黑色的;
    4. 如果一个节点是红色的, 那么它的孩子节点都是黑色的;
    5. 从任意一个节点到叶子节点, 经过的黑色节点是一样的; (重点)
       (2-3树是一颗绝对平衡二叉树, 所以从根节点到叶子节点的深度是一致的!) 向下走的深度是一样的

       可以说, 红黑树是保持"黑平衡"的二叉树, 严格意义上, 不是平衡二叉树;

       如果节点数是N的话, 最大高度: 2logN,   O(logN)


参考: rb_tree_03.png 好好思考!

Robert Sedgewick: 红黑树的发明人
Donald Knuth: 现代计算机科学的前驱

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

<Algorithms 4> 算法4的介绍很好
    1. 红黑树与 2-3 树的等价性;
    2. 理解 2-3 树和红黑树之间的关系;
    3. 学习 2-3 树, 不仅对于理解红黑树有帮助, 对于理解B类树也是有巨大帮助的;


2-3树
    1. 满足二分搜索树的基本性质;
    2. 节点可以存放一个元素或者两个元素;
    3. 每个节点有2个或者3个孩子 —— 2-3树
    4. 称作 2节点或者3节点
    5. 非常重要的性质: 2-3树是一颗绝对平衡的树;   详见: 2-3_tree_01.png
       (对于任意一个节点来说, 左右子树的高度一定是相等的);

树的绝对平衡性


2-3树如何维持绝对的平衡（本节内容需要动笔画一画, 图片需要下载）
   1. 2-3 树的添加方式非常有趣;
   2. 如果插入 2- 节点, 进行融合操作   12 ——> 6, 12
   3. 如果插入 3- 节点,            6,12 ——> 2, 6, 12
      父亲节点为 2- 节点, 先拆分, 再融合;
   4. 如果插入3-节点

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

红黑树与2-3树的等价性


小练习:
   1. 自己编写一个2-3树;


红黑树定义:
   1. 所有的红色节点都是向左倾斜的; (定义出来的)  3节点左边的孩子变为红色, 是一种规定;


红黑树中的红节点都是左倾斜的。
红黑树是保持“黑平衡”的二叉树（黑色节点保持绝对平衡），严格意义上，不是平衡的二叉树。对于有n个节点的红黑树，
最差情况下，它的最大高度可能会达到2logN（仍是O（logN）级别的复杂度）   需要画图掌握, 不明白!


对红黑树进行增删改查操作，复杂度都是O（logN）。 可以看出，在红黑树中查找元素其实比AVL要慢（因为AVL高度为O（logN），
但是，在红黑树中增加和删除元素要比AVL快。

(适用于经常需要添加或者删除元素的场景);


红黑树添加新元素
   1. 2-3 树中添加一个新元素;
   2. 或者添加 2- 节点, 形成一个 3- 节点;
   3. 或者添加 3- 节点, 暂时形成一个 4- 节点;
   4. 永远添加红色节点;


颜色翻转 flipColors

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

红黑树的总结
   1. 对于完全随机的数据，普通的二分搜索树很好用。（缺点：极端情况下退化成链表）;
   2. 对于查询较多的情况，AVL很好用;
   3. 红黑树牺牲了平衡性（2logN的高度），但是统计性能更优（综合增删改查所有操作）;
   4. 很多底层容器（比如TreeMap、TreeSet）底层都是红黑树;


高层次的练习
   1. 红黑树删除节点更复杂, 课程中没有讲! 去github中看看
   2. 还有右倾红黑树
   3. 另一种统计性能优秀的树结构: Splay Tree(伸展树)
      局部性原理: 刚被访问的内容下次高概率被再次访问

   4. java.util中的TreeMap 和 TreeSet 是基于红黑树实现的;
   5. 算法导论中也有红黑树的实现, 与课程中的实现方式不一样;


面试高频题：
   1. 对于红黑树, 任何不平衡都会在三次旋转内解决?

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————





















