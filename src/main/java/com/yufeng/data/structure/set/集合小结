高级数据结构 ———— 集合(Set)


集合 ———— 数学相关概念
   1. 定义: 指具有某种特定性质的具体的或抽象的对象汇总而成的集合。其中, 构成集合的这些对象则称为该集合的元素;
   2. 含有有限个元素的集合叫做有限集, 含无限个元素的集合叫做无限集;

   3. 集合的特性
      3-1 确定性: 给定一个集合, 任给一个元素, 该元素属于或者不属于该集合, 二者必居其一, 不允许由模棱两可的情况出现;
      3-2 互异性: 一个集合中, 任何两个元素都认为是不相同的, 即每个元素只能出现一次;
                 有时需要对同一元素出现多次的情形进行刻画，可以使用多重集，其中的元素允许出现多次
      3-3 无序性: 一个集合中, 每个元素的地位都是相同的, 元素之间是无序的。
                 集合上可以定义序关系，定义了序关系后，元素之间就可以按照序关系排序。但就集合本身的特性而言，元素之间没有必然的序

   4. 集合的分类
      4-1 空集
      4-2 子集
      4-3 交并集
      4-4 补集
      4-5 幂集



数据结构 ———— 集合:
   1. 承载元素的容器, 每个元素只能存在一次。 非常快速地进行去重这个工作;
   2. 不能添加重复元素。 典型应用: 客户统计、词汇量统计;
   3. 上一小结实现的二分搜索树, 不能盛放重复元素, 是非常好的实现"集合"的底层数据结构;
   4. 接口实现示例: Set<E>
   5. 基于二分搜索树底层数据结构实现的集合, 代码示例: BSTSet.java
   6. 基于链表底层数据结构实现的集合, 代码示例: LinkedListSet.java
   7. 为什么要将链表和二分搜索树进行比较? 因为 BST 和 LinkedList 都属于动态数据结构!
   8. 链表和二分搜索树性能比较，


集合类的复杂度分析: 二分搜索树的性能是高于linkedListSet的。


LinkedListSet:
   1. 增 add         O(n), 需要检查一遍是否存在元素
   2. 查 contains    O(n)
   3. 删 remove      O(n)


BSTSet:
    1. 增 add        O(h) = O(log2(n))
    2. 查 contains   O(h) = O(log2(n))
    3. 删 remove     O(h) = O(log2(n))
    4. h: 就是二分搜索树的高度!
       h层, 一共有多少个节点? 2^h - 1 个节点 = n
       h = log2(n+1) = O(log2(n))


log(n) 和 n 的差距
                     log(n)       n
    1.    n = 16      4           16          相差4倍
    2.    n = 1024    10          1024        相差100倍
    3.    n = 100W    20          100W        相差5万倍


总结:
    1. 由此可见, 平均来讲, 基于二分搜索树实现的集合, 时间复杂度是log(n),  是非常快的!
    2. 但是, 二分搜索树有局限性。 最差情况下会退化成一个链表! 也就是 1, 2, 3, 4, 5... 变成这样!  变成O(n)这种情况
       (解决问题的方法就是: 平衡二叉树)


有序集合和无序集合
   1. 有序集合中的元素具有顺序性;            -- 通常有序的集合都是基于搜索树实现的; 比如TreeSet
   2. 无序集合中的元素没有顺序性:            -- 比如本章基于链表实现的 LinkedListSet
      使用链表实现的集合是没有顺序性的; 更好的解决方案: 基于哈希表的实现: 增、删、查其实比搜索树还要快; 比如HashSet


延伸扩展:
   1. 多重集合: 集合中的元素可以重复;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

总结:
   1. 集合是一种动态的数据结构;
   2. 它的底层可以基于搜索树实现，也可以基于链表或者哈希表实现;
      2-1 比如jdk中的TreeSet就是基于红黑树实现的有序集合;
      2-2 而HashSet 是基于哈希表实现的无序集合;
      2-3 由于搜索树保持了有序性，此时它付出的代价就是时间复杂度上稍微差于哈希表;

   3. 集合的性质是每个元素只能存在一次, 不会重复添加元素;
   4. 常见的应用有: 客户统计、词汇量统计;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

