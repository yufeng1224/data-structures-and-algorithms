

二分搜索树退化称为链表


AVL 树 ———— 最为经典的平衡二叉树
AVL: 出自2个人的名字, G.M.Adelson-Velsky 和 E.M.Landis
1962年的论文首次提出
最早的自平衡二分搜索树结构, 第一个自平衡的二叉树


平衡二叉树
   1. 对于'任意'一个节点，左子树和右子树的高度差不能超过1;
   2. 平衡二叉树的高度和节点数量之间的关系也是O(logN)的;
   3. 标注节点的高度; 然后计算平衡因子, 也就是当前节点左右子树的高度差;
   4. 堆、线段树都属于平衡二叉树;


AVL树也是一个二分搜索树，所以需要满足二分搜索树的性质。


AVL树的左旋转和右旋转
   1. 在什么时候维护平衡?
      加入节点后, 沿着节点向上维护平衡性


不平衡的情况
   1. 插入的元素在不平衡的节点的左侧的左侧, 进行右旋转;  (LL)
   2. 插入的元素在不平衡的节点的右侧的右侧, 进行左旋转;  (RR)
   3. 插入的元素在不平衡的节点的左侧的右侧 (LR)
      3-1 首先对x进行左旋转, 转化为了 LL 的情况,
      3-2 然后按第1步再进行操作
   4. 插入的元素在不平衡的节点的由侧的做侧 (RL)
      4-1 首先对x进行右旋转, 转化为了 RR 的情况,
      4-2 然后按第2步再进行操作


AVL树的删除


更多扩展
   1. 基于AVL树的set和map;
   2. AVLMap 和 AVLSet 编写;
   3. AVL 树的进一步的优化;
      (高度的变化不需要再优化)

   4. AVL树的局限性

   5. 红黑树的平均性能会比AVL树性能更优的
      旋转操作会更少


最小失衡子树: 在新插入的节点向上查找, 以第一个平衡因子的绝对值超过1的节点为根的子树称为最小不平衡子树。
也就是说, 一颗失衡的树, 是有可能有多颗子树同时失衡的。 而这个时候, 我们只要调整最小的不平衡子树, 就能够将不平衡的数调整为平衡的树。


1. 平衡二叉树的失衡跳转主要是通过旋转最小失衡子树来实现的!
2. 根据旋转的方向有两种处理方式，左旋 与 右旋
3. 旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转;


左旋(RR不平衡)
   1. 节点的右孩子替代此节点位置
   2. 右孩子的左子树变为该节点的右子树
   3. 节点本身变为右孩子的左子树


右旋(LL不平衡)
   1. 节点的左孩子代表此节点;
   2. 节点的左孩子的右子树变为节点的左子树;
   3. 将此节点作为左孩子节点的右子树;


https://zhuanlan.zhihu.com/p/56066942

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

总结:
   1. AVL树也是一颗二分搜索树;
   2. 它出现的原因就是为了解决二分搜索树退化成链表的情况;
   3. 平衡二叉树的性质是:
      3-1 对于任何一个结点, 它的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。

   在一棵平衡二叉树中，节点的平衡因子只能取 0 、1 或者 -1;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

















