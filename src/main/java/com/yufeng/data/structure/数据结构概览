数据结构 ———— 数据结构是我成为资深或者架构师的必经之路，是IT生涯必须迈过的一道坎, 这块知识点可以帮我打开向上的空间!

为什么要学习数据结构?
    1. 数据结构是所有计算机专业的学生必学的一门课程
    2. 数据结构研究的是数据如何在计算机中进行组织和存储，使得我们可以"高效"的获取数据或者修改数据; (关键词: 高效)
    3. 越大的公司，越需要程序员拥有扎实的数据结构和算法功底


数据结构可以分为3类:
    1. 线性数据结构
       1-1 数组
       1-2 栈
       1-3 队列
       1-4 链表
       1-5 哈希表

    2. 树结构
       2-1 二叉树
       2-2 AVL
       2-3 红黑树
       2-4 Treap
       2-5 Splay
       2-6 堆
       2-7 Trie
       2-8 线段树
       2-9 K-D树
       2-10 并查集
       2-11 哈夫曼树

    3. 图结构
       3-1 邻接矩阵
       3-2 邻接表

最终目标: 在实际工作中, 我们需要根据应用场景的不同, 灵活选择最合适的数据结构


小结:
    1. 数据结构可以分为线性结构、树结构和图结构
    2. 数据结构研究的是如何在计算机中进行组织和存储，使得我们可以"高效"的获取数据或者修改数据
    3. 最终目的就是需要我们根据应用场景的不同，灵活选择最合适的数据结构

------------------------------------------------------------------------------------------------------------------------
在计算机的世界里, 数据结构无处不在。 应用领域:
    1. 数据库
    2. 操作系统
    3. 文件压缩
    4. PDA通讯录


大量的算法, 都是以数据结构为基石的。 比如
    1. 寻路算法
    2. 图论算法; DFS(深度优先遍历): 使用栈;  BFS(广度优先遍历): 使用队列
    3. 数据结构 + 算法 = 程序
    4. 近乎任何一本算法教材, 都包含大量的篇幅讲解数据结构


课程学习设置
    1. 数组
    2. 栈
    3. 队列
    4. 链表
    5. 二分搜索树
    6. 堆
    7. 线段树
    8. Trie
    9. 并查集
    10. AVL
    11. 红黑树
    12. 哈希表


课程学习
    1. 本课程不包含图结构。 图论领域以算法为主
    2. 手把手的底层实现, 创建属于自己的小型数据结构库
    3. 强调比较和优化
    4. 面向面试, 掌握6种基础的数据结构: 数组、栈、队列、链表、二分搜索树、堆; (必须达到手写代码的程度!)
    5. 面向竞赛: 线段树、 Trie、 并查集

------------------------------------------------------------------------------------------------------------------------
时间复杂度分析(它是用来考察代码的性能, 主要是时间和空间方面)
   1. 常见的时间复杂度，按数量级递增排列依次为:
      常数阶O(1)、对数阶O(log2n)、线性阶O(n)、线性对数阶O(n * log2n)、平方阶O(n^2)、立方阶O(n^3)、k次方阶O(n^k)、指数阶O(n^n)

   2. 大O描述的是算法的运行时间和输入数据之间的关系

   3. 对于一个算法, 假设其问题的输入大小为n, 那么我们可以用 O(n) 来表示其算法复杂度(time complexity)。
      那么, 渐进时间复杂度（asymptotic time complexity）就是当n趋于无穷大的时候，O(n)得到的极限值

   4. 时间复杂度举例
      4-1 T = 2*n + 2               O(n)
      4-2 T = 2000*n + 10000        O(n)
      4-3 T = 1*n*n                 O(n^2)
      4-4 T = 2*n*n + 300n + 10     O(n^2)
      (当n趋于无穷大的时候, 低阶项已经不起作用了)

   5. 通常在分析时间复杂度的时候, 分析的都是最坏的情况


学习方法讨论
   1. 不要完美主义, 掌握好"度"
   2. 学习奔着自己的目标去
   3. 对于这个课程, 大家的首要目标, 是了解各个数组结构的底层实现原理

------------------------------------------------------------------------------------------------------------------------
目录:
   1. 数组  Array
      时间设置: 2019-07-01

   2. 泛型  generic
      时间设置: 2019-07-03

   3. 栈  stack
      时间设置: 2019-07-04

   4. 队列 queue
      时间设置: 2019-07-06

   5. 链表 linkedList
      时间设置: 2019-07-09

   6. 二分搜索树  binarySearchTree
      时间设置: 2019-07-12

   7. 集合 set
      时间设置: 2019-07-15

   8. 映射 map
      时间设置: 2019-07-17

   9. 优先队列和堆 heap
      时间设置: 2019-07-20




------------------------------------------------------------------------------------------------------------------------

9-1 树结构 ---- 线段树(区间树) Segment Tree

线段树也是一种树结构。


解决方案: 使用数组实现
大多数情况下, 线段树是不考虑添加元素或者删除元素的。 区间本身是固定的。


线段树属于高级数据结构。

更高级的需求: 对于一个区间进行更新。 比如
将[2,5]区间所有元素 + 3。
    1. 先找到中间节点 A[2,3], A[4,5] 都加6;
    2. 叶子节点相应的也要进行跟新, 进行 +3 操作;
解决方案: 懒惰更新! 之前数组中的缩容也讲到过! 使用lazy 数组记录未更新的内容。

区间相关的经典问题: RMQ ---- Range Minimum Query

更高级的线段树: 二维线段树

区间操作相关另外一个重要数据结构: 树状数组 Binary Index Tree。

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

12 章 ---- 平衡二叉树和AVL树
AVL: 出自2个人的名字

平衡二叉树概念:
   对于任意一个节点，左子树和右子树的高度差不能超过1;
   平衡二叉树的高度和节点数量之间的关系也是O(logN)的;

   标注节点的高度

   计算平衡因子: 左右子树的高度差的绝对值 >= 2, 则这棵树不是平衡二叉树。
   叶子节点的平衡因子 = 0



                     62
                  /      \
                41        30
              /   \     /    \
            28     16  22     13
           /
         12

AVL:
   1. 最早的自平衡二分搜索树结构;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


玩转数据结构总结

1. 线性结构 ---->  动态数组   普通队列   栈    链表    哈希表
2. 树形结构 ---->  二分搜索树(堆、 线段树)   AVL 树、 红黑树
   2-1 AVL树、红黑树可以看成是二分搜索树的改进;
   2-2 堆、线段树属于二叉树;
   2-3 Trie、并查集属于多叉树;

3. 图结构   ---->  邻接表  邻接矩阵

抽象数据结构(ADT)  线性表: 可以通过动态数组、链表实现。
   1. 抽象数据类型(abstract data type)
   2. 线性表: 动态数组; 链表
   3. 栈, 队列
   4. 集合、映射， 可以分为两类
      4-1 有序集合、有序映射
      4-2 无序集合、无序映射


更多数据结构没有涉及
   1. 队列
      1-1 双端队列;
      1-2 随机队列;
      1-3 最大最小队列;

   2. 链表
      2-1 双向链表;
      2-2 循环链表;

   3. 高级数据结构
      3-1 跳跃表;
      3-2 后缀数组;
      3-3 k-D 树;
      3-4 Splay 树;
      3-5 B树 (需要重点掌握下)

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


































