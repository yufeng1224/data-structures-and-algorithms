高级树结构 ———— 字典树(前缀树) Trie

Trie树
    1. Tire树(字典树), 又称前缀树、单词查找树, 是一种树形结构, 是一种哈希树的变种;
    2. 专门为字典设计的数据结构, 通常Trie用来处理字符串;
    3. 典型应用是用于统计和排序大量的字符串(但不仅限于字符串), 经常被搜索引擎用于文本词频统计;
    4. 它的优点是: 最大限度地减少无谓的字符串比较, 查询效率比哈希表高;
    5. Trie的核心思想是空间换时间, 利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的;


与二叉树的比较:
    1. 如果有n个条目， 使用树结构，查询的时间复杂度是O(logN);
    2. 如果有100万个条目(2^20), logN大约为20;
    3. 但是使用Trie, 查询每个条目的时间复杂度和字典中一共有多少条目无关!
       时间复杂度O(w), w为查询单词的长度, 而大多数单词的长度小于10(时间复杂度变为常量级);


它有3个基本性质:
   1. 根节点不包含字符，除根节点外每一个节点都只包含一个字符;
   2. 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串;
   3. 每个节点的所有子节点包含的字符都不相同;


TreeMap的底层是改良后的平衡二叉树, 是红黑树


更多Trie字典树的话题
   1. Trie的删除操作;
   2. Trie的局限性 ———— 最大的问题: 空间! 因为是用空间换时间;
      改造方案一: 压缩字典树(Compressed Trie)
      改造方案二: 三分搜索树(Ternary Search Trie)
   3. 字符串模式识别: 后缀树


更多字符串问题
   1. 子串查询(最为经典)
   2. KMP
   3. Boyer-Moore
   4. Rabin-Karp
   5. 文件压缩(重要)
   6. 模式匹配(重要)
   7. 编译原理
   8. DNA

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

