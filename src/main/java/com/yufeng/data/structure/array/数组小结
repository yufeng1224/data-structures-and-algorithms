线性数据结构 ———— 数组

数组:
    1. 作用: 是用来存放一组具有相同类型数据的数据结构, 可以通过整数下标来访问数组中的每一个值。数组一旦被创建，就不能改变它的大小;
    2. 数组的下标从0开始计数, 到数据大小减1结束;
    3. 在Java中不能越过数组下标的范围去访问数组中的数据，否则产生名为 ArrayIndexOutOfBoundsException 的运行时异常;
    4. 数组最大的优点: 支持随机访问, 快速查询。 arr[index] 可以直接访问;
    5. 数组有两个缺点
       5.1 在数组的开头或者中间插入元素, 需要将插入位置后的元素全部向后滑动;
       5.2 数组的长度固定, 如果数组中元素已经满了, 我们需要重新分配更大的空间, 将原有的元素插入到新的数组中, 然后再进行插入操作;

    6. 索引可以有语意, 也可以没有语意;
       有语意指的是index 有实际意义(比如 LeetCode 中的有些题目),  没有语意指的是 index 单纯只是迭代的时候用到
    7. 所以数组最好应用于 "索引有语意"的情况, 也就是能够利用起 index;
       (但并非所有有语意的索引都适用于数组)


小结:
    1. 数组是用来存放一组具有相同类型数据的线性数据结构;
    2. 它最大的优点是支持随机访问, 它的缺点是长度固定、无法动态扩展；
    3. 自定义动态数组只需要2个成员变量就可以: size —— 代表数组中实际有多少个元素;  E[] data —— 泛型数组;
    4. 代码示例详见: Array.java;


========
面试知识点
    1. ArrayList
       1.1 ArrayList 是线性的数据结构，它的底层就是通过对数组的二次开发实现的，是一个动态的数组;
       1.2 ArrayList 默认初始化的容量为10, 每次添加新元素都会对容量检查。扩容的话，每次增长为原来容量的1.5倍，并将原数组中的数据拷贝到新数组中;
       1.3 ArrayList 不是线程安全的。 ArrayList 的添加、删除操作, 时间复杂度都是O(n);
       1.4 ArrayList 适用于查询、修改频繁的场景, 因为修改和查询在已知索引的情况下, 时间复杂度是O(1);
       1.5 ArrayList addLast 和 removeLast 操作, 均摊复杂度为 O(1);


    ArrayList 和 Vector 的区别:
         1)  ArrayList 和 Vector 底层都是通过数组实现的;
         2)  Vector 是线程安全的;  ArrayList 是非线程序安全的;
         3)  性能上面 Vector 比 ArrayList 慢;
         4)  ArrayList 和 Vector 都有一个初始的容量大小, Vector 扩容为原来的两倍，ArrayList 扩容为原来的1.5倍;


    jdk 中的 ArrayList、 Vector、 Stack、 ArrayQueue 都是基于数组实现的;
    jdk 中的 Stack 是继承 Vector;
    jdk 中的 ArrayQueue 就是一个循环队列;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

2021_04_17 补充

知识点归纳
   1. 在java中应用到数组的类有: ArrayList、 Vector、 Stack、 ArrayQueue, 这些类的底层都是基于数组这种数据结构实现的;
   2. jdk中的 Stack(栈) 继承了 Vector, 而 Vector 是基于数组实现的一个线程安全的动态数组;
      所以说 jdk中的栈也是基于数组实现的, 它是利用到了数组 addLast 这个操作的均摊复杂度是O(1) 这一特性， 也就是说Stack的入栈和出栈，
      操作的是数组的尾端;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

总结:
   1. 定义: 数组是用来存放一组具有相同类型的元素;
   2. 数组是线性数据结构, 在计算机中, 使用的是一块连续的内存来进行存储;
   3. 数组最大的优点就是支持随机访问;
   4. 数组有两个缺点:
      4-1 在数组的开头或者中间插入元素, 需要将插入位置后的元素全部向后滑动;
      4-2 数组的长度固定, 如果元素已经满了, 我们就需要重新分配更大的空间来存储元素;
   5. 最后一点就是数组是比较基础的数据结构, 基于数组这种数据结构，可以实现其他更高级的数据结构。 比如
      5-1 在jdk中, ArrayList 和 Vector 就是基于数组实现的一个动态的数组;
      5-2 然后在Vector的基础之上, 我们通过利用数组的addLast这个操作的均摊时间复杂度是O(1)这一特性, 实现了栈这种后入先出的数据结构;
      5-3 另外, 通过数组, 还可以实现数组队列, 以及它的改进版本, 也就是循环队列ArrayQueue;
      5-4 最后就是在树结构方面的应用, 可以通过数组去实现最大堆、最小堆、线段树、并查集等高级数据结构;

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————



